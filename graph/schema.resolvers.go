package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"

	"github.com/JitenMobile/graphql-mvp/graph/model"
)

// IncrementTrackViews is the resolver for the incrementTrackViews field.
func (r *mutationResolver) IncrementTrackViews(ctx context.Context, id string) (*model.IncrementTrackViewsResponse, error) {
	return r.TrackService.IncrementTrackViews(id)
}

// TracksForHome is the resolver for the tracksForHome field.
func (r *queryResolver) TracksForHome(ctx context.Context) ([]*model.Track, error) {
	return r.TrackService.GetTracksForHome()
}

// Track is the resolver for the track field.
func (r *queryResolver) Track(ctx context.Context, id string) (*model.Track, error) {
	return r.TrackService.GetTrackByID(id)
}

// Module is the resolver for the module field.
func (r *queryResolver) Module(ctx context.Context, id string) (*model.Module, error) {
	return r.ModuleService.GetModuleContents(id)
}

// Author is the resolver for the author field.
func (r *trackResolver) Author(ctx context.Context, obj *model.Track) (*model.Author, error) {
	return r.TrackService.GetAuthor(obj.AuthorID)
}

// ModuleContents is the resolver for the moduleContents field.
func (r *trackResolver) ModuleContents(ctx context.Context, obj *model.Track) ([]*model.Module, error) {
	return r.TrackService.GetModuleContents(obj.ID)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Track returns TrackResolver implementation.
func (r *Resolver) Track() TrackResolver { return &trackResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type trackResolver struct{ *Resolver }
